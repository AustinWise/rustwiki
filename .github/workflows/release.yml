# Creates a GitHub release, builds the program for multiple targets, then
# uploads the build assets to the GitHub release.
#
# Based on the following:
# https://github.com/BurntSushi/ripgrep/blob/df83b8b44426b3f2179abe632eb183e8c8270524/.github/workflows/release.yml
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ci_testing
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: true

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.image }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # The name of the program executable.
      PROGRAM_NAME: smeagol-wiki
    strategy:
      matrix:
        build: [linux-x64, linux-arm32, linux-arm64, macos-x64, macos-arm64, win-x64-msvc, win-x86-msvc, win-arm64-msvc]
        include:
        - build: linux-x64
          os: ubuntu
          image: ubuntu-20.04
          target: x86_64-unknown-linux-gnu
        - build: linux-arm32
          os: ubuntu
          image: ubuntu-20.04
          target: arm-unknown-linux-gnueabihf
        - build: linux-arm64
          os: ubuntu
          image: ubuntu-20.04
          target: aarch64-unknown-linux-gnu
        - build: macos-x64
          os: macos
          image: macos-11
          target: x86_64-apple-darwin
        - build: macos-arm64
          os: macos
          image: macos-11
          target: aarch64-apple-darwin
        - build: win-x64-msvc
          os: windows
          image: windows-2022
          target: x86_64-pc-windows-msvc
        - build: win-x86-msvc
          os: windows
          image: windows-2022
          target: i686-pc-windows-msvc
        - build: win-arm64-msvc
          os: windows
          image: windows-2022
          target: aarch64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}

    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target ${{ matrix.target }}

    - name: Strip release binary (macos)
      if: matrix.os == 'macos'
      run: strip "target/${{ matrix.target }}/release/${{ env.PROGRAM_NAME }}"

    - name: Build archive
      shell: bash
      run: |
        staging="${{ env.PROGRAM_NAME }}-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$staging"/doc

        cp {README.md,LICENSE} "$staging/"
        cp CHANGELOG.md "$staging/doc/"

        if [ "${{ matrix.os }}" = "windows" ]; then
          cp "target/${{ matrix.target }}/release/${{ env.PROGRAM_NAME }}.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/${{ env.PROGRAM_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
